% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/carbon.R
\name{carbon}
\alias{carbon}
\title{Carbon R6 class}
\description{
The Carbon generator creates a new \code{Carbon}-object, which is the class containing
all the app logic. The class is based on the \link[R6:R6Class]{R6} OO-system and
is thus reference-based with methods and data attached to each object, in
contrast to the more well known S3 and S4 systems.
}
\section{Initialization}{

A new 'Carbon'-object is initialized using the \code{new()} method on the generator:

\tabular{l}{
\code{x <- carbon$new(code = clipr::read_clip())}
}
}

\section{Fields}{


\foldstart{<big> Public Fields </big>}

Description of fields of the R6 object that can be set by the user can be found
in the following \link[carbonate:carbon-fields]{page}.

\foldend
}

\section{Methods}{


\foldstart{<big> Interacting with Browser </big>}

\tabular{ll}{
\link[carbonate:carbon-carbonate]{$carbonate} \tab Using RSelenium fetch the carbon image output \cr
\link[carbonate:.browse]{$browse} \tab open \link[carbonate:carbon-uri]{$uri} in the browser
}

\foldend

\foldstart{<big> Aesthetics </big>}

\tabular{ll}{
\link[carbonate:carbon-set-fields]{$set_template} \tab set $template \cr
\link[carbonate:carbon-get-fields]{$get_templates} \tab get a list of possible templates \cr
\link[carbonate:carbon-set-fields]{$set_window_control_theme} \tab  set $windows_control_theme \cr
\link[carbonate:carbon-get-fields]{$get_windows_control_themes} \tab get a list of possible window control themes\cr
\link[carbonate:carbon-set-fields]{$set_font_family} \tab set $font_family\cr
\link[carbonate:carbon-get-fields]{$get_font_families} \tab get a list of possible fonts
}

\foldend

\foldstart{<big> URI Building </big>}

\tabular{ll}{
\link[carbonate:carbon-uri]{$uri} \tab construct valid carbon.js uri \cr
\link[carbonate:carbon-options]{$options} \tab return all current carbon options\cr
\link[carbonate:carbon-encode]{$encode} \tab URL encode a string for the $uri \cr
\link[carbonate:carbon-tinyurl]{$tiny}  \tab Create tinyurl from \link[carbonate:carbon-uri]{$uri} \cr
\link[carbonate:carbon-rtweet]{$rtweet}  \tab Send tweets containing media generated from carbon
}

\foldend

\foldstart{<big> Webdriver Settings </big>}

\tabular{ll}{
\link[carbonate:carbon-chrome]{$chromeOptions} \tab construct a chromeOptions object \cr
\link[carbonate:carbon-chrome]{$chrome_start} \tab start a chrome session \cr
\link[carbonate:carbon-chrome]{$chrome_stop} \tab stop a chrome session \cr
\link[carbonate:carbon-selenium]{$start} \tab start a RSelenium session \cr
\link[carbonate:carbon-selenium]{$stop} \tab stop a RSelenium session \cr
\link[carbonate:carbon-selenium]{$stop_all} \tab stop all active RSelenium sessions
}

\foldend
}

\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{carbon$new()}}
\item \href{#method-set_template}{\code{carbon$set_template()}}
\item \href{#method-set_window_control_theme}{\code{carbon$set_window_control_theme()}}
\item \href{#method-set_font_family}{\code{carbon$set_font_family()}}
\item \href{#method-get_windows_control_themes}{\code{carbon$get_windows_control_themes()}}
\item \href{#method-get_font_families}{\code{carbon$get_font_families()}}
\item \href{#method-get_templates}{\code{carbon$get_templates()}}
\item \href{#method-options}{\code{carbon$options()}}
\item \href{#method-uri}{\code{carbon$uri()}}
\item \href{#method-browse}{\code{carbon$browse()}}
\item \href{#method-chromeOptions}{\code{carbon$chromeOptions()}}
\item \href{#method-chrome_start}{\code{carbon$chrome_start()}}
\item \href{#method-chrome_stop}{\code{carbon$chrome_stop()}}
\item \href{#method-start}{\code{carbon$start()}}
\item \href{#method-stop}{\code{carbon$stop()}}
\item \href{#method-stop_all}{\code{carbon$stop_all()}}
\item \href{#method-carbonate}{\code{carbon$carbonate()}}
\item \href{#method-encode}{\code{carbon$encode()}}
\item \href{#method-tiny}{\code{carbon$tiny()}}
\item \href{#method-rtweet}{\code{carbon$rtweet()}}
\item \href{#method-set_port}{\code{carbon$set_port()}}
\item \href{#method-get_port}{\code{carbon$get_port()}}
\item \href{#method-clone}{\code{carbon$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$new(code = clipr::read_clip(), yml = "~/carbon.yml", silent_yml = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_template"></a>}}
\subsection{Method \code{set_template()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$set_template(template = self$get_templates()[16])}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_window_control_theme"></a>}}
\subsection{Method \code{set_window_control_theme()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$set_window_control_theme(theme = self$get_windows_control_themes()[1])}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_font_family"></a>}}
\subsection{Method \code{set_font_family()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$set_font_family(family = self$get_font_families()[6])}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_windows_control_themes"></a>}}
\subsection{Method \code{get_windows_control_themes()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$get_windows_control_themes()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_font_families"></a>}}
\subsection{Method \code{get_font_families()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$get_font_families()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_templates"></a>}}
\subsection{Method \code{get_templates()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$get_templates()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-options"></a>}}
\subsection{Method \code{options()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$options(code = self$code)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-uri"></a>}}
\subsection{Method \code{uri()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$uri(code = self$code)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-browse"></a>}}
\subsection{Method \code{browse()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$browse()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-chromeOptions"></a>}}
\subsection{Method \code{chromeOptions()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$chromeOptions()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-chrome_start"></a>}}
\subsection{Method \code{chrome_start()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$chrome_start()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-chrome_stop"></a>}}
\subsection{Method \code{chrome_stop()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$chrome_stop()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-start"></a>}}
\subsection{Method \code{start()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$start(eCap = self$chromeOptions())}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-stop"></a>}}
\subsection{Method \code{stop()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$stop()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-stop_all"></a>}}
\subsection{Method \code{stop_all()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$stop_all()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-carbonate"></a>}}
\subsection{Method \code{carbonate()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$carbonate(
  file = "rcarbon.png",
  path = tempdir(),
  code = self$code,
  rD = self$rD
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-encode"></a>}}
\subsection{Method \code{encode()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$encode(URL, reserved = FALSE, repeated = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-tiny"></a>}}
\subsection{Method \code{tiny()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$tiny(clip = FALSE)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-rtweet"></a>}}
\subsection{Method \code{rtweet()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$rtweet(
  media,
  status = self$tweet_status,
  media_format = c("png", "gif"),
  ...
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_port"></a>}}
\subsection{Method \code{set_port()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$set_port(port = NULL)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_port"></a>}}
\subsection{Method \code{get_port()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$get_port()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{carbon$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
